# -*- coding: utf-8 -*-
"""Copy of Job_recommendation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Hb4DYNeH7DPvYMVq4b14MpEHG2QfFqlc

# Decision Tree Classification

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

url = "https://raw.githubusercontent.com/bmounikareddy98/Machine-learning-assignments/main/Job_recommendation.csv?token=GHSAT0AAAAAABTE75RGZET4KXX4POU2IJ3WYSIZTQA"
dataset = pd.read_csv(url)
dataset=dataset.dropna()
print(dataset.head())
print(dataset.shape)

X = dataset.iloc[:, [1,2,3,4]].values
y = dataset.iloc[:, 7].values

from sklearn.preprocessing import LabelEncoder
le_1 = LabelEncoder()
y = le_1.fit_transform(y)
#le = LabelEncoder()
#X=le.fit_transform(X)

print(le_1.inverse_transform(y))

def encoding(X):
  """from sklearn.compose import ColumnTransformer
  from sklearn.preprocessing import OneHotEncoder
  ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [3])], remainder='passthrough')
  X_new = np.array(ct.fit_transform(X_new))
  #print(X_new[0])
  #print(X_new.shape)
  ct_1 = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [12])], remainder='passthrough')
  X_new= np.array(ct_1.fit_transform(X_new))
  #print(X_new[:17:])
  return X_new"""
  from sklearn.preprocessing import LabelEncoder
  le=LabelEncoder()
  X[:,3]= le.fit_transform(X[:,3])
  #X[:,4]= le.fit_transform(X[:,4])
  return X

print(X[0])

"""## Feature Scaling"""

def scaling(X):
  from sklearn.preprocessing import StandardScaler
  sc = StandardScaler()
  X[:,[0,1,2]] = sc.fit_transform(X[:,[0,1,2]])
  return X
  #X_test[:, 19:] = sc.transform(X_test[:, 19:])

def pre_processing(X):
    X=encoding(X)
   
    X=scaling(X)
    return X

print(X.shape)

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)

#X = np.reshape(X, (500, 1))
X=encoding(X)
classifier.fit(X, y)

"""[link text](https://)## Predicting the new input results"""

def predict(X_test):
  y_pred = classifier.predict(X_test)
  print(le_1.inverse_transform(y_pred))
  return y_pred
  #return (le.inverse_transform(y_pred))
  #print(np.concatenate((y_pred.reshape(len(y_pred),1), y_test.reshape(len(y_test),1)),1))

#data = [[10, 8,7,'Legal','Texas',98000]]
def output(age,career_gao,experience,domain):
  
  #X_test=X_test_2
  new_row = np.array([age,career_gao,experience,domain])
  #X_test = np.append(X_test,[new_row],axis= 0)
  new_row = np.reshape(new_row, (1, 4))
  new_row= pre_processing(new_row)
 
  #new_column = []
  #X_test = np.delete(X_test, 1, 1)
  #an_array = np.insert(an_array, 1, new_column, axis=1)
  res=predict(new_row)
  #print(res.tail())
  #result=res[-1]   
  #print(result)
  #print(X_test[-1:])
  #X_test=X_test_2
  return res



#X_new= encoding(X_test)
#print(X_new)

res=output(23,2,7,'Culinary')